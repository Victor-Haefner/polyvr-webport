<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="PROJECT" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="4294967295">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" shadowVolume="1e+06 1e+06 1e+06 -1e+06 -1e+06 -1e+06 1" specular="0.1 0.1 0.1 1" type="Light" visible="4294967295">
        <Object accept_root="1" aspect="1" at="0.171163 0.0739542 0.0100001" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-0.231703 0.252379 0.44626" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="4294967295">
          <Object at="0 0 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="4294967295">
            <constraint persistency="666"/>
          </Object>
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Cameras activeCam="Default" persistency="666"/>
  <Rendering deferred_rendering="0" fogColor="0.5 0.5 0.5 1" fogParams="0 0 100 0.1" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	from VR.Math import Vec3
	Pi = 3.14

	if hasattr(VR, 'scene'): VR.scene.destroy()
	VR.scene = VR.Object('scene', 'light')
	
	if hasattr(VR, 'mechanism'): VR.mechanism.clear()
	else: VR.mechanism = VR.Mechanism()
	VR.scene.addChild(VR.mechanism)
	
	# primitives
	def addGear(params):
		p = VR.Geometry(params[0])
		s = ' '.join([str(i) for i in params])
		p.setPrimitive( s )
		p.setPickable(True)
		VR.scene.addChild(p)
		p.addTag('gear')
		VR.mechanism.add(p)
		p.convertToTriangles()
		return p
		
	# Gear: width hole pitch N_teeth teeth_size bevel
	pitch = 0.02
	Nteeth = 32
	radius = pitch*Nteeth/Pi
	
	VR.P1 = addGear(['Gear', 0.04, 0.02, pitch, Nteeth, 0.01, 0])
	VR.P2 = addGear(['Gear', 0.04, 0.02, pitch, Nteeth, 0.01, 0])
	VR.P3 = addGear(['Gear', 0.04, 0.02, pitch, Nteeth, 0.01, 0])
	
	VR.P2.translate([radius,0,0])
	VR.P3.translate([radius,radius,0])
	
	VR.P1.setColor('blue')
	VR.P2.setColor('red')
	VR.P3.setColor('green')
	
	VR.mechanism.updateNeighbors()
	VR.mechanism.hide()
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="1" persistency="666"/>
    </Script>
    <Script base_name="update" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	if not hasattr(VR, 'P1'): return
	
	VR.P1.rotate(0.01, [0,0,1])
	VR.mechanism.update()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="test" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	print 'hello world!'
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
